{"version":3,"file":"static/js/142.a97dc5c3.chunk.js","mappings":"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","sources":["utils/schemas/RegisterSchema.js","components/RegistrationForm/RegistrationForm.styled.js","components/RegistrationForm/index.jsx","pages/RegistrationPage/index.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const RegisterSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'validationRegisterForm.label1')\n    .max(15)\n    .required('validationDiaryForm.label4'),\n  email: yup\n    .string()\n    .email('notify.alert3')\n    .required('validationDiaryForm.label4'),\n  password: yup\n    .string()\n    .min(8, 'validationRegisterForm.label3')\n    .max(100)\n    .required('validationDiaryForm.label4'),\n});\n","import styled from '@emotion/styled';\nimport { theme } from '../Theme';\nimport { Link } from 'react-router-dom';\nimport { Field, Form } from 'formik';\nimport google from 'images/google.svg';\n\nexport const GoogleButton = styled.a`\n  width: 182px;\n  height: 44px;\n  padding: 12px 16px 12px 42px;\n  line-height: 17px;\n  letter-spacing: 0.04em;\n  font-weight: ${theme.fontWeights.bold};\n  border-radius: 30px;\n  border: 2px solid ${theme.colors.accent};\n  color: ${theme.colors.white};\n  font-size: ${theme.fontSizes.s};\n  box-shadow: '0px 4px 10px 0px #fc842d80';\n  transition: ${theme.transition.all};\n  color: ${theme.colors.accent};\n  cursor: pointer;\n  background-image: url(${google});\n  background-color: ${theme.colors.white};\n  background-repeat: no-repeat;\n  background-position: 12px 11px;\n  &:hover,\n  :focus {\n    box-shadow: 0px 4px 10px rgba(252, 132, 45, 0.5);\n  }\n`;\nexport const MessageErr = styled.p`\n  color: red;\n  width: 300px;\n  text-align: justify;\n  font-weight: 700;\n`;\n\nexport const Wrap = styled.div`\n  padding-top: 40px;\n  @media screen and (min-width: 768px) {\n    padding-top: 160px;\n  }\n`;\n\nexport const Title = styled.h1`\n  font-size: 14px;\n  text-align: center;\n  text-transform: uppercase;\n  color: #fc842d;\n  margin-bottom: 60px;\n  @media screen and (min-width: 768px) {\n    text-align: start;\n  }\n`;\n\nexport const FormReg = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  @media screen and (min-width: 768px) {\n    align-items: start;\n  }\n`;\n\nexport const FormList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-bottom: 60px;\n  @media screen and (min-width: 768px) {\n    margin-bottom: 80px;\n  }\n`;\n\nexport const FormItem = styled.li`\n  position: relative;\n  width: 280px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  height: 16px;\n  color: #9b9faa;\n  letter-spacing: 0.04em;\n  font-weight: 700;\n`;\n\nexport const Input = styled(Field)`\n  height: 20px;\n  width: 100%;\n  outline: none;\n  border: none;\n  border-bottom: 1px solid #e0e0e0;\n  @media screen and (min-width: 768px) {\n    max-width: 240px;\n  }\n  &:focus,\n  &:hover {\n    outline: none;\n  }\n  &:focus,\n  :hover {\n    border-bottom: 1px solid #fc842d;\n  }\n\n  &::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  gap: 32px;\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n    gap: 20px;\n    align-items: center;\n  }\n`;\n\nexport const Button = styled.button`\n  font-weight: 700;\n  letter-spacing: 0.04em;\n  display: flex;\n  text-align: center;\n  justify-content: center;\n  width: 100%;\n  padding: 13px 25px;\n  background-color: #fc842d;\n  box-shadow: 0px 4px 10px rgba(252, 132, 45, 0.5);\n  border-radius: 30px;\n  border: 2px solid #fc842d;\n  color: #ffffff;\n  cursor: pointer;\n  transition: background-color 250ms, color 250ms;\n  &:hover,\n  &:focus {\n    color: #fc842d;\n    background: transparent;\n  }\n  &:disabled {\n    background: #9b9faa;\n    box-shadow: 0px 4px 10px #9b9faa;\n  }\n  max-width: 180px;\n`;\n\nexport const StyledNavLink = styled(Link)`\n  font-weight: 700;\n  letter-spacing: 0.04em;\n  display: flex;\n  text-align: center;\n  justify-content: center;\n  width: 100%;\n  padding: 13px 25px;\n  background-color: transparent;\n  border-radius: 30px;\n  border: 2px solid #fc842d;\n  color: #fc842d;\n  cursor: pointer;\n  transition: background-color 250ms, color 250ms;\n  &:hover,\n  &:focus {\n    color: #ffffff;\n    box-shadow: 0px 4px 10px rgba(252, 132, 45, 0.5);\n    background: #fc842d;\n  }\n  &:disabled {\n    background: #9b9faa;\n    box-shadow: 0px 4px 10px #9b9faa;\n  }\n  max-width: 180px;\n`;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport { register } from 'redux/auth/auth-operations';\nimport { RegisterSchema } from 'utils/schemas/RegisterSchema';\nimport { ButtonAuth, ButtonLinkAuth } from 'components/Button';\nimport { Link } from 'react-router-dom';\nimport {\n  Title,\n  FormList,\n  FormItem,\n  Label,\n  Input,\n  ButtonsContainer,\n  FormReg,\n  Wrap,\n  MessageErr,\n  GoogleButton,\n} from './RegistrationForm.styled';\nimport { ShowPasswordButton } from 'components/Button/ShowPasswordButton';\nimport { userSelector } from 'redux/auth/auth-selectors';\nimport { useTranslation } from \"react-i18next\";\n\nconst FormError = ({ name }) => {\n    const { t } = useTranslation();\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <MessageErr>{t(message)}</MessageErr>}\n    />\n  );\n};\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport const RegistrationForm = () => {\n  const userSavedData = useSelector(userSelector.selectUserSavedData);\n\n  const [showPassword, setShow] = useState(false);\n  const handleClick = () => setShow(!showPassword);\n  const dispatch = useDispatch();\n    const { t } = useTranslation();\n\n  const handleSubmit = async ({ name, email, password }, { resetForm }) => {\n    userSavedData\n      ? await dispatch(register({ ...userSavedData, name, email, password }))\n      : await dispatch(register({ name, email, password }));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={RegisterSchema}\n      >\n        <Wrap>\n          <Title>{t(\"header.signup2\")}</Title>\n\n          <FormReg autoComplete=\"off\">\n            <FormList>\n              <FormItem>\n                <Label htmlFor=\"name\">{t(\"AuthForm.label_1\")}</Label>\n                <Input id=\"name\" name=\"name\" type=\"text\" />\n                <FormError name=\"name\" component=\"p\" />\n              </FormItem>\n              <FormItem>\n                <Label htmlFor=\"email\">{t(\"AuthForm.label_3\")}</Label>\n                <Input id=\"email\" name=\"email\" type=\"text\" />\n                <FormError name=\"email\" component=\"p\" />\n              </FormItem>\n\n              <FormItem>\n                <Label htmlFor=\"password\">{t(\"AuthForm.label_2\")}</Label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'true' : 'password'}\n                />\n                <FormError name=\"password\" component=\"p\" />\n                <ShowPasswordButton\n                  handleClick={handleClick}\n                  show={showPassword}\n                />\n              </FormItem>\n            </FormList>\n            <ButtonsContainer>\n              <ButtonAuth text={t(\"header.buttonReg\")} />\n              <Link to=\"/login\">\n                <ButtonLinkAuth text={t(\"header.buttonLogin\")} />\n              </Link>\n              <GoogleButton href={`https://slimmoms-api.onrender.com/api/auth/google`}>\n               {t(\"header.google\")}\n              </GoogleButton>\n            </ButtonsContainer>\n          </FormReg>\n        </Wrap>\n      </Formik>\n    </>\n  );\n};\n","import { AuthBackground } from 'components/AuthBackground';\nimport { RegistrationForm } from 'components/RegistrationForm';\n\nconst RegistrationPage = () => {\n  return (\n    <>\n      <AuthBackground />\n      <RegistrationForm />\n      {/* </AuthBackground> */}\n    </>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["RegisterSchema","yup","shape","name","min","max","required","email","password","GoogleButton","styled","theme","google","MessageErr","Wrap","Title","FormReg","Form","FormList","FormItem","Label","Input","Field","ButtonsContainer","Link","FormError","t","useTranslation","render","message","initialValues","RegistrationForm","userSavedData","useSelector","userSelector","useState","showPassword","setShow","dispatch","useDispatch","handleSubmit","resetForm","register","onSubmit","validationSchema","autoComplete","htmlFor","id","type","component","ShowPasswordButton","handleClick","show","Button","text","to","href","AuthBackground"],"sourceRoot":""}